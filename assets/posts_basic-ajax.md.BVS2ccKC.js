import{_ as i,b as a,o as n,a5 as t}from"./chunks/framework.CAaOUjTN.js";const A=JSON.parse('{"title":"AJAX 基础","description":"","frontmatter":{"title":"AJAX 基础","date":"2017-10-27T13:08:27.000Z","tags":["Ajax"],"license":"CC BY-NC 4.0","read":{"text":"2 min read","minutes":1.265,"time":75900,"words":253}},"headers":[{"level":2,"title":"AJAX 的核心部分","slug":"ajax-的核心部分","link":"#ajax-的核心部分","children":[]}],"relativePath":"posts/basic-ajax.md","filePath":"posts/basic-ajax.md"}'),h={name:"posts/basic-ajax.md"};function l(k,s,p,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<blockquote><p>一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p></blockquote><h2 id="ajax-的核心部分" tabindex="-1">AJAX 的核心部分 <a class="header-anchor" href="#ajax-的核心部分" aria-label="Permalink to &quot;AJAX 的核心部分&quot;">​</a></h2><p>AJAX 的核心逻辑代码真心少的可怜～，总结一下，一共就三部分。</p><ol><li>创建 <code>XMLHttpRequest</code> 对象</li><li>创建 <code>XMLHttpRequest</code> 在 <code>readyState</code> 发生变化时的回调函数</li><li>使用 <code>XMLHttpRequest</code> 发送请求</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">function</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> loadXMLDoc</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">url</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">,</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;"> callback</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;">    // 创建对象</span></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">    let</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;"> xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;"> window</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">XMLHttpRequest</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> ?</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> new</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> XMLHttpRequest</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">()</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> :</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> new</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> ActiveXObject</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&quot;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">Microsoft.XMLHTTP</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&quot;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;">    // 接收到数据之后的处理</span></span>
<span class="line"><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">    xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">onreadystatechange</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> =</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> function</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">()</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">        callback</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;">    // 发送请求</span></span>
<span class="line"><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">    xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">open</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&quot;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">GET</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&quot;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">,</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;"> url</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">,</span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;"> true</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">);</span></span>
<span class="line"><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">    xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">send</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">();</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;">// 处理函数</span></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">function</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> callbackTest</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;">    // 请求成功</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">    if</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> (</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">readyState</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> ==</span><span style="--shiki-dark:#4C9A91;--shiki-light:#2F798A;"> 4</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> &amp;&amp;</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;"> xmlhttp</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">status</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> ==</span><span style="--shiki-dark:#4C9A91;--shiki-light:#2F798A;"> 200</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;">        // do somthing</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">    }</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">}</span></span></code></pre></div><p>看到这里，其实就完了，真正的逻辑就这么几行代码。AJAX 处理的事情就到这里结束了，具体拿到请求之后的数据怎么处理，那些都不是 AJAX 需要关心的事情</p><p><strong>具体实例可参考 <a href="https://www.w3cschool.cn/ajax/aeqvxfnu.html" target="_blank" rel="noreferrer">AJAX 实例</a></strong></p>`,7)]))}const y=i(h,[["render",l]]);export{A as __pageData,y as default};
