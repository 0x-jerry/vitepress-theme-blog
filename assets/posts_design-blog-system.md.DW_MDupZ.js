import{_ as r,b as t,o as a,a5 as o}from"./chunks/framework.CAaOUjTN.js";const v=JSON.parse('{"title":"设计一个像 hexo 的博客系统(1)","description":"","frontmatter":{"title":"设计一个像 hexo 的博客系统(1)","date":"2021-09-26T07:37:40.000Z","tags":["Blog","System Design"],"read":{"text":"3 min read","minutes":2.335,"time":140100,"words":467}},"headers":[{"level":2,"title":"为什么造轮子","slug":"为什么造轮子","link":"#为什么造轮子","children":[]},{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"v-blog 系统设计","slug":"v-blog-系统设计","link":"#v-blog-系统设计","children":[{"level":3,"title":"main-server 设计","slug":"main-server-设计","link":"#main-server-设计","children":[]},{"level":3,"title":"render-server 设计","slug":"render-server-设计","link":"#render-server-设计","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[]}],"relativePath":"posts/design-blog-system.md","filePath":"posts/design-blog-system.md"}'),l={name:"posts/design-blog-system.md"};function s(n,e,i,d,h,c){return a(),t("div",null,e[0]||(e[0]=[o('<p>本文尝试设计一个博客框架，以解决在使用 <a href="https://hexo.io/" target="_blank" rel="noreferrer">Hexo</a> 时不痛快的点。</p><h2 id="为什么造轮子" tabindex="-1">为什么造轮子 <a class="header-anchor" href="#为什么造轮子" aria-label="Permalink to &quot;为什么造轮子&quot;">​</a></h2><p><a href="https://hexo.io/" target="_blank" rel="noreferrer">Hexo</a> 是一个偏向传统的博客系统，通过模板系统，把每一篇文章渲染出来。主题，插件都非常多。也非常优秀。</p><p>既然 <a href="https://hexo.io/" target="_blank" rel="noreferrer">Hexo</a> 有这么多优点，为什么还要造轮子呢？</p><p>几年前也写过 <a href="https://hexo.io/" target="_blank" rel="noreferrer">Hexo</a> 主题 <a href="https://github.com/0x-jerry/hexo-theme-simple" target="_blank" rel="noreferrer">hexo-theme-simple</a>，后来也不维护了。原因比较简单，我更加喜欢用 <code>Vue</code> 来写前端，用 <code>JQuery</code> 配合模板来写，总是写的碍手碍脚的。</p><p>前不久，尝试用 <a href="https://vitejs.dev" target="_blank" rel="noreferrer">vite</a> 配合 <a href="https://github.com/antfu/vite-ssg" target="_blank" rel="noreferrer">vite-ssg</a>，重构了一次博客，效果还不错。</p><p>用起来舒服了很多，但是也遇到一些问题，例如 <strong>分页</strong> 就没有很好的解决方案。</p><p>先尝试以前后端分离 + <code>SSG</code> 的方式来设计一套博客系统。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>为了方便描述，暂定名称 <code>v-blog</code>。</p><p><code>v-blog</code> 的诞生时为了让静态博客能利用更加现代化的系统来开发，如 <a href="https://vitejs.dev" target="_blank" rel="noreferrer">vite</a>。</p><h2 id="v-blog-系统设计" tabindex="-1"><code>v-blog</code> 系统设计 <a class="header-anchor" href="#v-blog-系统设计" aria-label="Permalink to &quot;`v-blog` 系统设计&quot;">​</a></h2><p>初步想法，采用 <strong>前后端分离</strong> 的方式。</p><p>一个 <code>main-server</code> 服务器，用于处理 <code>markdown</code> 文件，以及分页等信息。</p><p>一个 <code>render-server</code> 服务器，用于服务端渲染/生成，开发时，用作服务端渲染，部署时，用作服务端生成。</p><h3 id="main-server-设计" tabindex="-1">main-server 设计 <a class="header-anchor" href="#main-server-设计" aria-label="Permalink to &quot;main-server 设计&quot;">​</a></h3><p><code>main-server</code> 仅提供 API 供 <code>render-server</code> 消费。可采用 <code>koa</code> 的洋葱模式，提供插件开发。</p><p>核心提供 <code>markdown</code> 文件处理，分页信息，标签信息，以及默认渲染。</p><h3 id="render-server-设计" tabindex="-1">render-server 设计 <a class="header-anchor" href="#render-server-设计" aria-label="Permalink to &quot;render-server 设计&quot;">​</a></h3><p><code>render-server</code> 由 <a href="https://vitejs.dev" target="_blank" rel="noreferrer">vite</a> 驱动，主要提供一些插件，以提供更好的开发体验。</p><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><p>先记录一下这个想法，接下来尝试做一个验证，追踪地址： <a href="https://github.com/0x-jerry/v-blog-system" target="_blank" rel="noreferrer">v-blog-system</a></p>',22)]))}const g=r(l,[["render",s]]);export{v as __pageData,g as default};
