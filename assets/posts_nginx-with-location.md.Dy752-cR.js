import{_ as i,b as a,o as n,a5 as t}from"./chunks/framework.CAaOUjTN.js";const c=JSON.parse('{"title":"Nginx-Location","description":"","frontmatter":{"title":"Nginx-Location","date":"2020-12-16T18:57:15.000Z","tags":["Nginx"],"license":"CC BY-NC 4.0","read":{"text":"2 min read","minutes":1.085,"time":65100,"words":217}},"headers":[],"relativePath":"posts/nginx-with-location.md","filePath":"posts/nginx-with-location.md"}'),l={name:"posts/nginx-with-location.md"};function p(e,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[t(`<blockquote><p>文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location" target="_blank" rel="noreferrer">http://nginx.org/en/docs/http/ngx_http_core_module.html#location</a></p></blockquote><p>规则:</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> [ = | ~ | ~* | ^~] url </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{ ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> @name </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{ ... }</span></span></code></pre></div><p>修饰符：</p><ul><li><code>=</code>: 一模一样的等于</li><li><code>~</code>: 区分 url 大小写</li><li><code>~*</code>: 不区分 url 大小写</li><li><code>^~</code>: 标志 location 后面的 url 不是正则表达式。如果 url 是正则的形式，则会以字符串的形式匹配。</li></ul><p>如，无修饰符，默认匹配最长前缀。</p><p>示例：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> =</span><span style="--shiki-dark:#C4704F;--shiki-light:#AB5E3F;"> / </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">    [ </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">configuration</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> A ]</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> / </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">    [ </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">configuration</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> B ]</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> /documents/ </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">    [ </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">configuration</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> C ]</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> ^~</span><span style="--shiki-dark:#C4704F;--shiki-light:#AB5E3F;"> /images/ </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">    [ </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">configuration</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> D ]</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;">location</span><span style="--shiki-dark:#CB7676;--shiki-light:#AB5959;"> ~*</span><span style="--shiki-dark:#C4704F;--shiki-light:#AB5E3F;"> \\.(gif|jpg|jpeg)$ </span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">{</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">    [ </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">configuration</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> E ]</span></span>
<span class="line"><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;">}</span></span></code></pre></div><table tabindex="0"><thead><tr><th>路径</th><th>配置</th></tr></thead><tbody><tr><td>/</td><td>A</td></tr><tr><td>/index.html</td><td>B</td></tr><tr><td>/documents/document.html</td><td>C</td></tr><tr><td>/images/1.gif</td><td>D</td></tr><tr><td>/documents/1.jpg</td><td>E</td></tr></tbody></table><p>问：为什么 <code>/documents/1.jpg</code> 匹配到的是 E 二不是 C ？</p><p>答：因为 E 中 url 表达式比 C 中长。</p>`,11)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
