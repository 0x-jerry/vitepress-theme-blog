import{_ as o,b as t,o as d,a5 as a}from"./chunks/framework.CAaOUjTN.js";const u=JSON.parse('{"title":"设计一个像 hexo 的博客系统(2)","description":"","frontmatter":{"title":"设计一个像 hexo 的博客系统(2)","date":"2021-09-27T02:16:47.000Z","tags":["Blog","System Design"],"read":{"text":"4 min read","minutes":3.275,"time":196500,"words":655}},"headers":[{"level":2,"title":"尝试利用 Vite-Plugin-SSR","slug":"尝试利用-vite-plugin-ssr","link":"#尝试利用-vite-plugin-ssr","children":[{"level":3,"title":"基础解决方案","slug":"基础解决方案","link":"#基础解决方案","children":[]}]},{"level":2,"title":"下一个方案","slug":"下一个方案","link":"#下一个方案","children":[]}],"relativePath":"posts/design-blog-system-2.md","filePath":"posts/design-blog-system-2.md"}'),i={name:"posts/design-blog-system-2.md"};function r(c,e,l,s,n,p){return d(),t("div",null,e[0]||(e[0]=[a('<p><a href="./design-blog-system">前篇</a> 中的想法，貌似有点行不通，其中一个难点则是怎么去动态的传输 <code>Markdown</code> 文件的数据。</p><p>为什么要动态加载 <code>Markdown</code> 文件呢？<a href="https://github.com/antfu/vite-plugin-md" target="_blank" rel="noreferrer">vite-plugin-md</a> 这个插件，可以自定义 <code>Markdown</code> 渲染，以及包裹一层 <code>Vue</code> 组件，一个比较好用的场景， 则是通过修改 <code>Markdown</code> 渲染的标签，改成自定义标签，例如 <code>a</code> 标签修改成 <code>v-link</code> 组件，这样，<code>v-link</code> 组件的实现，则可以替换原有 <code>a</code> 的功能， 实现一些差异化的功能，例如外链和页内链接做不同的显示。我知道这个通过 <code>markdown-it</code> 插件也可以做到，但是 <code>markdown-it</code> 插件，并不能混合 <code>js</code> 代码。</p><p>例如想实现图片的一些交互，如果用 <code>markdown-it</code> 插件来实现，则需要分离这部分 <code>js</code> 代码。如果通过自定义标签，则可以更加方便的处理这个功能。</p><h2 id="尝试利用-vite-plugin-ssr" tabindex="-1">尝试利用 Vite-Plugin-SSR <a class="header-anchor" href="#尝试利用-vite-plugin-ssr" aria-label="Permalink to &quot;尝试利用 Vite-Plugin-SSR&quot;">​</a></h2><p>尝试用 <a href="https://github.com/brillout/vite-plugin-ssr/tree/master/examples/vue-full" target="_blank" rel="noreferrer">vite-plugin-ssr:pre-render</a> 这个例子来验证 <code>v-blog</code> 的想法，这能完美的解决部分问题，分页显示，标签页等，但也遇到一个难点。</p><p>例如，通过 <code>Markdown</code> 写一篇文章，一般会用 <code>&lt;!-- more --&gt;</code> 这样的注释来分割摘要内容，然后在文章列表渲染出来，那么怎么解决摘要的渲染呢？</p><h3 id="基础解决方案" tabindex="-1">基础解决方案 <a class="header-anchor" href="#基础解决方案" aria-label="Permalink to &quot;基础解决方案&quot;">​</a></h3><p>最开始的想法是，在渲染之前，通过 <code>markdown-it</code> 渲染，然后注入到当前页面的 状态（state） 里，但又需要另外一个问题，如果摘要里面，有自定义组件， 或者引入了图片资源，怎么办呢？</p><p>图片的链接问题，还是可以解决的，通过计算图片的相对地址以及用 <code>Vite</code> 计算哈希值的方式，替换图片链接即可。</p><p>比较困难的是，自定义组件怎么办呢？这个貌似必须要经过 <code>Vite</code> 编译才行。</p><p>真的是太难了 QAQ。</p><h2 id="下一个方案" tabindex="-1">下一个方案 <a class="header-anchor" href="#下一个方案" aria-label="Permalink to &quot;下一个方案&quot;">​</a></h2><p>目前看来，最困难的问题，也就是怎么通过 <code>Vite</code> 去渲染摘要内容。主要难点是摘要内容不是一个文件，是一个在内存中提取出来的 <code>Markdown</code> 文本。</p><p>如果要通过 <code>Vite</code> 编译过程，这需要一个载体，也许是 <code>Vite</code> 的虚拟文件，也许是写一个脚本，直接生成对应的文件。</p><p>两种方案原理一样，也就体验上有一点点不同。找个时间，验证一下这个方案是否可行。</p>',15)]))}const m=o(i,[["render",r]]);export{u as __pageData,m as default};
