import{_ as a,b as e,o as i,a5 as n}from"./chunks/framework.CAaOUjTN.js";const h=JSON.parse('{"title":"Docker 编译 ScratchBlocks","description":"","frontmatter":{"title":"Docker 编译 ScratchBlocks","date":"2019-04-26T21:51:30.459Z","tags":["Docker","Linux"],"license":"CC BY-NC 4.0","read":{"text":"2 min read","minutes":1.835,"time":110100,"words":367}},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"Dockerfile","slug":"dockerfile","link":"#dockerfile","children":[]}],"relativePath":"posts/cocker-compile-scratchblocks.md","filePath":"posts/cocker-compile-scratchblocks.md"}'),l={name:"posts/cocker-compile-scratchblocks.md"};function p(t,s,c,r,o,k){return i(),e("div",null,s[0]||(s[0]=[n(`<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>很久之前就研究过 Docker，苦于一直没有找到应用场景（毕竟经常写的是前端）</p><p>最近在研究 <code>Scratch-Blocks</code> ，每次打包都需要在虚拟机里面打包（因为需要 Python 和 Java 环境），还比较慢。 今天就尝试了一下是不是可以用 Docker 来打包，这样就可以直接挂服务器上一键打包了。结果是肯定的，当然没问题</p><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><p>既然是 Docker， 那第一步肯定是写 Dockerfile 和 Dockerignore 了，Dockerignore 根据项目写就完了，语法和 gitignore 一样</p><p>需要注意的是，要缓存 node_modules，所以在执行 build 命令之前需要先单独复制 yarn.lock 文件，然后执行 <code>yarn install --ignore-scripts</code> 达到缓存 node_modules 的目的</p><p>这是因为 <code>RUN, COPY, ADD</code> 指令每次都会创建中间容器（缓存用），这样每次 yarn.lock 改变才会执行 <code>yarn install</code> 命令，这样也就达到了缓存 node_modules 的目的</p><p>有时候可能还需要 <code>package.json</code> 文件，这里也加上</p><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># linux core, only 5M</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">FROM</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">WORKDIR</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># install nodejs python java</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">RUN</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> apk update &amp;&amp; apk add python nodejs yarn openjdk8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># cache node_modules accord by yarn.lock</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">COPY</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> yarn.lock /app</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">COPY</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> package.json /app</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">RUN</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> yarn install --ignore-scripts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">COPY</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> . /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># build</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">RUN</span><span style="--shiki-dark:#DBD7CAEE;--shiki-light:#393A34;"> yarn build</span></span></code></pre></div><p>然后打包 <code>docker build --rm -f &quot;Dockerfile&quot; -t scratch-blocks:latest .</code>，收工完成</p><p>文中提到的命令以及参数请参考 <a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noreferrer">docker build 文档</a>、<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer">Dockerfile 文档</a></p>`,11)]))}const D=a(l,[["render",p]]);export{h as __pageData,D as default};
